//---------------------------------------------------------------------------

#pragma hdrstop

//#include "Record.h"

//---------------------------------------------------------------------------
#pragma package(smart_init)

#include "Record.h"

using namespace std;

extern  char sepor;
extern char space;
extern AnsiString StudyTypePaid;
extern AnsiString StudyTypeFree;

Record getRecord(){
	Record tmp;

    //Trim() - delete unneccecuary probels.
	tmp.Name = Form1->EditName->Text.Trim();
	if(tmp.Name.Length() == 0){
		ShowMessage("Введите имя студента");
		throw 0;
	}    
    
    
	if(Form1->RadioGroupTypeOfTraining->ItemIndex == 0){
        tmp.TypeOfTraining = StudyTypePaid;
    }
	else if(Form1->RadioGroupTypeOfTraining->ItemIndex == 1){
         tmp.TypeOfTraining = StudyTypeFree;
    }
    else if (Form1->RadioGroupTypeOfTraining->ItemIndex == -1) {
         ShowMessage("Выберите форму обучения");         
    }
	else {
		ShowMessage("Выберите форму обучения");
		throw 0;
	}

    tmp.Specialty = Form1->EditSpecialty->Text.Trim();
    if(tmp.Specialty.Length() == 0){
         ShowMessage("Введите Специальность");
         throw 0;
    }
    
	try {
		tmp.Group = StrToInt(Form1->EditGroup->Text);
		if(tmp.Group < 0) throw 0;
	} catch (...) {
		ShowMessage("Введите номер группы");
		throw 0;
	}

	try {
		tmp.Math= StrToFloat(Form1->EditMath->Text);
        if (tmp.Math<0 || tmp.Math>10) {
           throw 0;    
        }
	} catch (...) {
		ShowMessage("Введите оценку по математике");
		throw 0;
	}

    try {
		tmp.Proga = StrToFloat(Form1->EditProga->Text);
        if (tmp.Proga<0 || tmp.Proga>10) {
           throw 0;    
        }
	} catch (...) {
		ShowMessage("Введите оценку по программированию");
		throw 0;
	}

    try {
		tmp.Philosophy= StrToFloat(Form1->EditPhilosophy->Text);
        if (tmp.Philosophy<0 || tmp.Philosophy>10) {
           throw 0;    
        }
	} catch (...) {
		ShowMessage("Введите оценку по философии");
		throw 0;
	}

    tmp.AverageMark = ((float)(tmp.Math + tmp.Philosophy + tmp.Proga))/3.0;
    Form1->LabelAverageMark->Caption = tmp.AverageMark;
    
	return tmp;
}

AnsiString FormatRecord(int ind){

    AnsiString tmpString;
    Record tmp;
    MyItems[ind] = tmp;

    tmpString = tmp.Name + space + sepor + space + tmp.TypeOfTraining + space + sepor +
                space + tmp.Specialty + space + sepor + space + tmp.Group + space + sepor +
                space + tmp.AverageMark + space + sepor;                     
    
	return tmpString;
}

AnsiString FormatRecord(Record tmp){
    AnsiString tmpString;

    tmpString = tmp.Name + space + sepor + space + tmp.TypeOfTraining + space + sepor +
                space + tmp.Specialty + space + sepor + space + tmp.Group + space + sepor +
                space + tmp.AverageMark + space + sepor;                    
    
	return tmpString;
}

Record FromStringToRecord(AnsiString ourStr){
       Record tmp;
       int i = 0;
       AnsiString tmpNameStr = "";
       while (ourStr[i] == space && ourStr[i+1]!=0){
           if (ourStr[i+1] != '|') {
                 tmpNameStr += ourStr[i];
           }
           i++;           
       }
       tmp.Name = tmpNameStr;

       

       //while

}
